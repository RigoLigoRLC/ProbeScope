# Generate build information header
function(generate_build_info TARGET_NAME OUTPUT_DIR)
    # Get current date and time
    string(TIMESTAMP BUILD_TIMESTAMP "%Y-%m-%d %H:%M:%S" UTC)
    
    # Get git information
    find_package(Git QUIET)
    if(GIT_FOUND)
        # Get current commit hash
        execute_process(
            COMMAND ${GIT_EXECUTABLE} rev-parse --short HEAD
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            OUTPUT_VARIABLE GIT_COMMIT_HASH
            OUTPUT_STRIP_TRAILING_WHITESPACE
            ERROR_QUIET
        )
        
        # Check if working directory is dirty
        execute_process(
            COMMAND ${GIT_EXECUTABLE} diff-index --quiet HEAD --
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            RESULT_VARIABLE GIT_IS_DIRTY
            ERROR_QUIET
        )
        
        # Get current tag if exists
        execute_process(
            COMMAND ${GIT_EXECUTABLE} describe --exact-match --tags HEAD
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            OUTPUT_VARIABLE GIT_TAG
            OUTPUT_STRIP_TRAILING_WHITESPACE
            ERROR_QUIET
        )
        
        # If dirty, append "-dirty" to commit hash
        if(NOT GIT_IS_DIRTY EQUAL 0)
            set(GIT_COMMIT_HASH "${GIT_COMMIT_HASH}-dirty")
        endif()
    else()
        set(GIT_COMMIT_HASH "unknown")
        set(GIT_TAG "")
    endif()
    
    # Set default values if git commands failed
    if(NOT GIT_COMMIT_HASH)
        set(GIT_COMMIT_HASH "unknown")
    endif()
    
    # Generate header content
    set(BUILD_INFO_HEADER_CONTENT "
#pragma once

// Build information generated by CMake
#define BUILD_TIMESTAMP \"${BUILD_TIMESTAMP}\"
#define GIT_COMMIT_HASH \"${GIT_COMMIT_HASH}\"
#define GIT_TAG \"${GIT_TAG}\"

namespace BuildInfo {
    const char* getBuildTimestamp() {
        return BUILD_TIMESTAMP;
    }
    
    const char* getCommitHash() {
        return GIT_COMMIT_HASH;
    }
    
    const char* getTag() {
        return GIT_TAG;
    }
    
    QString getVersionString() {
        QString versionString;
        if (QString(GIT_TAG).isEmpty()) {
            versionString = QString(\"Commit %1 - %2\").arg(GIT_COMMIT_HASH, BUILD_TIMESTAMP);
        } else {
            versionString = QString(\"Git Tag: %1 (Commit %2) - %3\").arg(GIT_TAG, GIT_COMMIT_HASH, BUILD_TIMESTAMP);
        }
        return versionString;
    }
}
")

    # Write header file
    file(WRITE ${OUTPUT_DIR}/buildinfo.h "${BUILD_INFO_HEADER_CONTENT}")
    
    # Add to target
    target_include_directories(${TARGET_NAME} PRIVATE ${OUTPUT_DIR})

    # Add a definition so that target won't try to fetch build info when it couldn't
    target_compile_definitions(${TARGET_NAME} PRIVATE PROBESCOPE_INCLUDE_BUILD_INFO)
    
endfunction()
